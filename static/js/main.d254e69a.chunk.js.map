{"version":3,"sources":["components/TodoListTemplate.js","components/TodoForm.js","components/TodoItem.js","components/TodoItemList.js","App.js","serviceWorker.js","index.js"],"names":["TodoListTemplate","form","children","className","TodoForm","value","onChange","onCreate","onKeyPress","onClick","TodoItem","nextProps","nextState","this","props","checked","text","id","onToggle","onRemove","e","stopPropagation","Component","TodoItemList","todos","todoList","map","key","App","state","input","handleChange","setState","target","handleCreate","concat","window","localStorage","setItem","JSON","stringify","handleKeyPress","handleToggle","index","findIndex","todo","selected","slice","length","handleRemove","filter","todoData","getItem","parse","prevProps","prevState","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d254e69a.chunk.js","sourcesContent":["import React from 'react';\r\nimport './TodoListTemplate.css';\r\n\r\nconst TodoListTemplate = ({form, children}) => {\r\n    return (\r\n        <main className=\"todo-list-template\">\r\n            <div className=\"title\">\r\n                To-Do\r\n            </div>\r\n            <section className=\"form-wrapper\">\r\n                {form}\r\n            </section>\r\n            <section className=\"todos-wrapper\">\r\n                {children}\r\n            </section>\r\n        </main>\r\n    );\r\n};\r\n\r\n\r\nexport default TodoListTemplate;","import React from 'react';\r\nimport './TodoForm.css';\r\n\r\nconst TodoForm = ({value, onChange, onCreate, onKeyPress}) => {\r\n    return (\r\n        <div className=\"todo-form\">\r\n            <input value={value} onChange={onChange} onKeyPress={onKeyPress}/>\r\n            <div className=\"add-button\" onClick={onCreate}>\r\n                추가\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TodoForm;","import React, { Component } from 'react';\r\nimport './TodoItem.css';\r\n\r\nclass TodoItem extends Component {\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return this.props.checked !== nextProps.checked;\r\n    }\r\n\r\n    render() {\r\n        const { text, checked, id, onToggle, onRemove } = this.props;\r\n        return (\r\n            <div className=\"todo-item\" onClick={() => onToggle(id)}>\r\n                <div className=\"remove\" onClick={(e) => {\r\n                    e.stopPropagation();\r\n                    onRemove(id);\r\n                }}>&times;</div>\r\n                <div className={`todo-text ${checked && 'checked'}`}>\r\n                    <div>{text}</div>\r\n                </div>\r\n                {\r\n                    checked && (<div className=\"check-mark\">✓</div>)\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoItem;\r\n","import React, { Component } from 'react';\r\nimport TodoItem from \"./TodoItem\";\r\n\r\nclass TodoItemList extends Component {\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    return this.props.todos !== nextProps.todos;\r\n  }\r\n\r\n  render() {\r\n\r\n      const { todos, onToggle, onRemove } = this.props;\r\n\r\n      const todoList = todos.map(\r\n        ({ id, text, checked }) => (\r\n          <TodoItem\r\n            id={id}\r\n            text={text}\r\n            checked={checked}\r\n            onToggle={onToggle}\r\n            onRemove={onRemove}\r\n            key={id}\r\n          />\r\n        )\r\n      );\r\n\r\n    return (\r\n        <div>\r\n         {todoList}\r\n        </div>\r\n    );\r\n\r\n  }\r\n  \r\n}\r\n\r\nexport default TodoItemList;","import React, { Component } from 'react';\nimport TodoListTemplate from './components/TodoListTemplate'\nimport TodoForm from './components/TodoForm'\nimport TodoItemList from \"./components/TodoItemList\"\n\nclass App extends Component {\n\n  id = 3;\n\n  state = {\n    input : '',\n    todos: []\n  }\n\n  componentWillMount() {\n\n    const todoData = localStorage.getItem(\"_TODO_LIST\");\n\n    if (todoData) {\n      this.setState({\n        input:'',\n        todos : JSON.parse(todoData)\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (JSON.stringify(prevState.todos !== JSON.stringify(this.state.todos))) {\n      localStorage.setItem(\"_TODO_LIST\", JSON.stringify(this.state.todos));\n    }\n  }\n\n  handleChange = (e) => {\n    this.setState(\n      { input : e.target.value }\n    );\n  }\n\n  handleCreate = () => {\n    const { input, todos} = this.state;\n    this.setState({\n      input: '',\n      todos: todos.concat({\n        id: this.id++,\n        text: input,\n        checked: false\n      })\n    });\n\n    window.localStorage.setItem(\"_TODO_LIST\", JSON.stringify(todos));\n\n  }\n\n  handleKeyPress = (e) => {\n    if (e.key === 'Enter') {\n      this.handleCreate();\n    }\n  }\n\n  handleToggle = (id) => {\n    const { todos } = this.state;\n    const index = todos.findIndex(todo => todo.id === id);\n    const selected = todos[index];\n\n    this.setState({\n      todos: [\n        ...todos.slice(0, index),\n        {\n          ...selected,\n          checked: !selected.checked\n        },\n        ...todos.slice(index + 1, todos.length)\n      ]\n    });\n\n    window.localStorage.setItem(\"_TODO_LIST\", JSON.stringify(todos));\n\n  }\n\n  handleRemove = (id) => {\n    const { todos } = this.state;\n\n    this.setState({\n      todos: todos.filter(todo => todo.id !== id)\n    });\n\n    window.localStorage.setItem(\"_TODO_LIST\", JSON.stringify(todos));\n\n  }\n\n  render() {\n    const { todos, input } = this.state;\n    const {\n      handleChange,\n      handleCreate,\n      handleKeyPress,\n      handleToggle,\n      handleRemove\n    } = this;\n\n    return (\n      <TodoListTemplate form={(\n        <TodoForm\n          value={input}\n          onChange={handleChange}\n          onCreate={handleCreate}\n          onKeyPress={handleKeyPress}\n          />\n      )}>\n        <TodoItemList todos={todos} onToggle={handleToggle} onRemove={handleRemove}/>\n      </TodoListTemplate>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
